# Boas praticas de programação

Esse é um repositorio de testes para estudo de boas praticas de programacao


https://localhost/boas-praticas/


--- ALGUMAS ANOTACOES IMPORTANTES

- MOSTRAR CONCEITOS

-- PRIMEIRA REFATORACAO E PARA TRAZER O CONCEITO DE CASO DE USO
--- TODO CASO DE USO TEM UMA ENTRADA E UMA SAIDA
---- ENTIDADE - NAO QUER DIZER QUE PRECISAMOS QUE ISSO SEJA UMA TABELA DO BD, VAO SERVIR PARA GARANTIR A ENTRADA E SAIDA DOS DADOS DA NOSSA CLASSE
----


-- SOLID = CONJUNTO DE PRINCIPIOS OBJETIVO RESOLVER A FRAGILIDADE DO SISTEMA

-- FRAGILIDADE E QUANDO A GENTE ADICIONA MUDANCAS E AS MUDANCAS QUEBRAM O QUE ESTA AO REDOR
-- ESSE E UM PROBLEMA MUITO COMUM NA ORIENTACAO A OBJETOS - ALTA COESAO E BAIXO ACOPLAMENTO
-- ALTA COESAO - COISAS QUE MUDAM POR MOTIVOS DIFERENTES E O ACOPLAMENTO E O RESULTADO DISSO, ACOPLAMENTO E INTIMIDADE, MEXE EM UM QUEBRA O OUTRO
--- S — Single Responsiblity Principle (Princípio da responsabilidade única)
--- O — Open-Closed Principle (Princípio Aberto-Fechado)
--- L — Liskov Substitution Principle (Princípio da substituição de Liskov)
--- I — Interface Segregation Principle (Princípio da Segregação da Interface)
--- D — Dependency Inversion Principle (Princípio da inversão da dependência)


-- OPEN CLOSE PRINCIPLE
--- Você deve ser capaz de estender um comportamento de uma classe sem a necessidade de modificá-lo.


- Todo teste tem um input e um output (Given When Then ou Arrange Atc Assert)
-- Given/Arrange: definir um estado conhecido;
-- When/Act: rodar a aplicação;
-- Then/Assert: certificar-se de que o novo estado é o estado esperado.


-- ACESSANDO O BANCO
-- ACESSANDO UMA API
-- REGRAS DE NEGOCIO (CALCULO DE IMPOSTO)

-- DEPENDENCIA E UM PROBLEMA - TIRO A API DO AR QUEBRA O SISTEMA, OU MUDO O VALOR DA COTACAO QUEBRA MEU TESTE
-- QUANDO A GENTE FAZ UM TESTE NOS PRECISAMOS QUE ELE SEJA REPETIVEL

-- REFATORAR API CURRENCIES - PADRAO GATEWAY - CRIA UM OBJETO PARA REPRESENTAR O SISTEMA EXTERNO
-- REFATORAR GET PRODUCT - SE APAGARMOS OS DADOS OU MUDAR O PRECO QUEBRA O SISTEMA - POR CAUSA DO ACOPLAMENTO PRO BD

-- ENTAO AGORA NOSSO CASO DE USO ESTA MELHOR OU PIOR?
-- NA QUESTAO DE RESPONSABILIDADE ESTE BEM MELHOR, POSSO MUDAR A API, POSSO MUDAR O BANCO DE DADOS, REDUZINDO A POSSIBILIDADE DE NOVAS MUDANCA NESSA CLASSE, POR ALTERACOES EXTERNAS


-- REFATORAR INJECAO DE DEPENDENCIA  - PADRAO DE DESIGN - FORNECE UMA DEPENDENCIA DE FORA DA CLASSE
-- MAS AINDA TEMOS UM ALTO ACOPLAMENTO QUE A CLASSE CONHECE O DETALHES DA CLASSE PASSADA COMO PARAMETRO

-- REFATORAR INVERSAO DE DEPENDENCIA - PRINCIPIO DO SOLID - Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender de abstrações; (https://medium.com/contexto-delimitado/o-princ%C3%ADpio-da-invers%C3%A3o-de-depend%C3%AAncia-d52987634fa9)
--- AGORA POSSO DROPAR O BANCO OU NAO TER INTERNET PARA ACESSAR A API E OS TESTES VAO CONTINUAR PASSANDO


QUANDO USAR? - https://www.macoratti.net/18/02/c_objrela1.htm - https://www.macoratti.net/net_uml1.htm

- ASSOCIACAO - EU TENHO ASSOCIACAO SEMPRE QUE UMA COISA TENHA A OUTRA
- AGREGACAO - TEM A VER COM O CICLO DE VIDA DO OBJETO - CICLO DE VIDA INDEPENDENTE
- COMPOSICAO - O CICLO DE VIDA DO OBJETO NASCE E MORRE DENTRO DA CLASSE


FORMAS DE INJETAR DEPENDENCIA
- CONSTRUTOR
- SETTER
- PROPRIEDADE, DECORATOR, ANNOTATIONS (PHP8)
- REGISTRY -- ESSE PADRAO FOI DEPRECIADO NO MAGENTO2 - O motivo principal foi a necessidade de melhorar o desempenho e a manutenibilidade do sistema, pois permitia o compartilhamento de dados globais.


- REFATORACAO - SEPARAR O USE CASE DA ENTIDADE
--  CRIANDO A ENTIDADE QUOTE E INSERINDO A LOGICA CADA UM NO SEU LUGAR

- ULTIMA REFATORACAO - COLOCANDO A REGRA DE FRETE EM UMA FACTORY, FACTORY SAO ACEITAVEIS QUE PODE QUEBRAR

-- CONCLUSAO
ESSAS SAO ALGUMAS BOAS PRATICAS QUE NOS AJUDAM A CRIAR SISTEMAS TESTAVEIS, COM CADA COISA NO SEU LUGAR E MAIS FACIL DE DAR MANUTENCAO NO FUTURO


-- DICA DE LEITURA:

https://branas.io/blog/qual-e-a-diferenca-entre-dependency-injection-e-dependency-inversion.html
https://branas.io/blog/